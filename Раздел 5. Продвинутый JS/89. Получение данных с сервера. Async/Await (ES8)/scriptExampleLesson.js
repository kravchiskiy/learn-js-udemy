/**
 * когда  запускается postData мы начинаем делать запрос. Запрос может идти долго, и поэтому в моменте в переменную res присвоится "ничего", а точнее просто обещание что-то вернуть. 
 * поэтому нужно предусмотреть какой-то механиизм, который будет превращать ассинхронный код в синхронный.
 * 
 * поэтому нужно async await
 * async ставим перед функцией. то есть кодд внутри будет какой-то ассинхронный код. 
 * а дальше необходимо ждать парный оператор await, перед теми операциями которые необходимо дождаться. 
 * 
 * теперь когдда запускаем postData, у нас так же начинается запрос, но теперь из-за await, js будет ждать ответа. и только потом будет что-то происходить. (по стандарту 30 секунд) и вот только когда вернется результат, сработает awain и пропустит работу дальше. в переменную res присвоится вернувшийся от сервера ответ. 
 * 
 * Когда ыв предполагается таймауты, или работу с сервером, и при необходимости они могут понадобиться. 
 * 
 * entries() - возвращает массив собственных перечисляемых свойств у указанного объекта. Object.entries(obj) => массив, с массиввами [['a', 23], ['b', 50]];
 * 
 * обратный метод - fromEntries()
 */


/**
 * двва новых свойства: 
 * 1. .ok - мы что-то получили, ввсе окей или не окей. 
 *    Если не окей, то в таком случае ывкину ошибку. если вывкинуть ошибку в ручном режиме, то сработает catch. 
 * объект ошибки throw new Error('текст ошибки.');
 * 
 * 2. status - попадаем на тот статус, который нам вернул сервер. 
 * 
 */