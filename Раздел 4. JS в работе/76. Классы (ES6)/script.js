/**
 * классы это красивая обертка функций конструкторов или синтаксический сахар.
 *
 * можно один раз описать шаблон компонента, и на его основе делаем два слайдера и тд.
 *
 */

class Name {
	//создали класс. теперь его нужно сконструировать.
	constructor(height, width) {
		//тут описываем те аргументы, которые будем передавать при создании экземпляра класса извне.
		//после того, как мы передали эти аргументы, мы должны записать их в наши свойства этого нового объекта.
		this.height = height;
		this.width = width;
	}

	//тут мы можем создать методы класса.
	//метод это обычная фнкция.
	method1() {
		return this.height * this.width;
	}
}

//использование класса
const rect = new Name(5, 10);
console.log(rect.method1());

/**
 * вспомним принципы OOP:
 * 1) Абстракция. когда отделям концепцию от экземпляра. концепция это описание класса.
 * 2) наследование - способность базироваться на нашем классе другого класса.
 *
 */

//нам нужно написать второй класс, только с ключевым словом extends и указать имя того класса, от которого мы наследуемся.
//так же нам нужно его сконструировать. в параметрах котруктора мы указаем те параметры, которые нам понядобятся. так же, чтобы не указывать дважды
//присвоения данных из передаваемых параметров мы вызываем супер контруктор supeer() родителя. она просто вызывает тоже самое, что и было у родителя.
//главное правило, super должно быть первой строчкой. и так же в него нужно казать те же свойства, что и у родителя.
class Name2 extends Name {
	constructor(height, width, text, color) {
		super(height, width);
		this.text = text;
		this.color = color;
	}
	showMyProps() {
		console.log(`${this.text}, ${this.color}`);
	}
}

const div = new Name2(10, 6, 'helloWorld', '#fff');
div.showMyProps();
console.log(div.method1());